---------------------------------------
Begin Slurm Prolog: Nov-18-2024 17:31:45
Job ID:    952270
User ID:   zyahn3
Account:   scs
Job name:  finetuningNxcode
Partition: coc-gpu
---------------------------------------
/home/hice1/zyahn3/.conda/envs/BugScanner
`config.hidden_act` is ignored, you should use `config.hidden_activation` instead.
Gemma's activation function will be set to `gelu_pytorch_tanh`. Please, use
`config.hidden_activation` if you want to override this behaviour.
See https://github.com/huggingface/transformers/pull/29402 for more details.
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:07<00:22,  7.55s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:13<00:13,  6.59s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:17<00:05,  5.32s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:21<00:00,  5.03s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:21<00:00,  5.46s/it]
/home/hice1/zyahn3/.local/lib/python3.9/site-packages/transformers/generation/configuration_utils.py:601: UserWarning: `do_sample` is set to `False`. However, `temperature` is set to `0.1` -- this flag is only used in sample-based generation modes. You should set `do_sample=True` or unset `temperature`.
  warnings.warn(
/home/hice1/zyahn3/.local/lib/python3.9/site-packages/transformers/generation/configuration_utils.py:606: UserWarning: `do_sample` is set to `False`. However, `top_p` is set to `0.1` -- this flag is only used in sample-based generation modes. You should set `do_sample=True` or unset `top_p`.
  warnings.warn(
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)
Query:
Analyze the following Solidity code:

pragma solidity ^0.4.2;
contract owned {
    address public owner;
    function owned() {
        owner = msg.sender;
    }
    modifier onlyOwner {
        if (msg.sender != owner) revert();
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
}
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract token {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    function token(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
        decimals = decimalUnits;                            
    }
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) revert();           
        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); 
        balanceOf[msg.sender] -= _value;                     
        balanceOf[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
    }
    function approve(address _spender, uint256 _value)
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success) {    
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) revert();                 
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  
        if (_value > allowance[_from][msg.sender]) revert();   
        balanceOf[_from] -= _value;                          
        balanceOf[_to] += _value;                            
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function () {
        revert();     
    }
}
contract FujintoToken is owned, token {
    uint public buyRate = 4000; 
    bool public isSelling = true;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function FujintoToken(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) revert();           
        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); 
        if (frozenAccount[msg.sender]) revert();                
        balanceOf[msg.sender] -= _value;                     
        balanceOf[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (frozenAccount[_from]) revert();                        
        if (balanceOf[_from] < _value) revert();                 
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  
        if (_value > allowance[_from][msg.sender]) revert();   
        balanceOf[_from] -= _value;                          
        balanceOf[_to] += _value;                            
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setBuyRate(uint newBuyRate) onlyOwner {
        buyRate = newBuyRate;
    }
    function setSelling(bool newStatus) onlyOwner {
        isSelling = newStatus;
    }
    function buy() payable {
        if(isSelling == false) revert();
        uint amount = msg.value * buyRate;                  
        balanceOf[msg.sender] += amount;                   
        balanceOf[owner] -= amount;                         
        Transfer(owner, msg.sender, amount);                
    }
    function withdrawToOwner(uint256 amountWei) onlyOwner {
        owner.transfer(amountWei);
    }
}
Original Answer:
The code contains a vulnerability of type 'Token Devalue' in the function 'mintToken'.
Generated Answer:
dises sete moza(), dises sete moza(), palet palet palet(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(), moza(),
Number of samples in test set: 135
  0%|          | 0/135 [00:00<?, ?it/s]  1%|          | 1/135 [00:07<17:45,  7.95s/it]  1%|▏         | 2/135 [00:15<17:37,  7.95s/it]  2%|▏         | 3/135 [00:23<17:28,  7.94s/it]  3%|▎         | 4/135 [00:31<17:24,  7.97s/it]  4%|▎         | 5/135 [00:39<17:16,  7.97s/it]  4%|▍         | 6/135 [00:47<17:10,  7.99s/it]  5%|▌         | 7/135 [00:55<17:00,  7.97s/it]Token indices sequence length is longer than the specified maximum sequence length for this model (2851 > 2048). Running this sequence through the model will result in indexing errors
  6%|▌         | 8/135 [01:03<16:59,  8.03s/it]  7%|▋         | 9/135 [01:11<16:49,  8.01s/it]You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset
  7%|▋         | 10/135 [01:20<17:06,  8.21s/it]  8%|▊         | 11/135 [01:28<16:48,  8.13s/it]  9%|▉         | 12/135 [01:36<16:41,  8.14s/it] 10%|▉         | 13/135 [01:45<16:45,  8.25s/it] 10%|█         | 14/135 [01:53<16:30,  8.19s/it] 11%|█         | 15/135 [02:01<16:24,  8.20s/it] 12%|█▏        | 16/135 [02:09<16:09,  8.15s/it] 13%|█▎        | 17/135 [02:17<15:57,  8.11s/it] 13%|█▎        | 18/135 [02:25<15:46,  8.09s/it] 14%|█▍        | 19/135 [02:33<15:39,  8.10s/it] 15%|█▍        | 20/135 [02:41<15:27,  8.07s/it] 16%|█▌        | 21/135 [02:49<15:17,  8.05s/it] 16%|█▋        | 22/135 [02:57<15:10,  8.06s/it] 17%|█▋        | 23/135 [03:06<15:13,  8.15s/it] 18%|█▊        | 24/135 [03:14<15:03,  8.14s/it] 19%|█▊        | 25/135 [03:22<14:53,  8.12s/it] 19%|█▉        | 26/135 [03:30<14:42,  8.10s/it] 20%|██        | 27/135 [03:38<14:32,  8.08s/it] 21%|██        | 28/135 [03:46<14:26,  8.09s/it] 21%|██▏       | 29/135 [03:54<14:16,  8.08s/it] 22%|██▏       | 30/135 [04:02<14:07,  8.07s/it] 23%|██▎       | 31/135 [04:10<13:58,  8.06s/it] 24%|██▎       | 32/135 [04:18<13:52,  8.08s/it] 24%|██▍       | 33/135 [04:27<13:50,  8.14s/it] 25%|██▌       | 34/135 [04:35<13:39,  8.12s/it] 26%|██▌       | 35/135 [04:43<13:32,  8.12s/it] 27%|██▋       | 36/135 [04:51<13:23,  8.11s/it] 27%|██▋       | 37/135 [04:59<13:13,  8.10s/it] 28%|██▊       | 38/135 [05:07<13:06,  8.11s/it] 29%|██▉       | 39/135 [05:15<12:58,  8.11s/it] 30%|██▉       | 40/135 [05:23<12:52,  8.13s/it] 30%|███       | 41/135 [05:31<12:41,  8.10s/it] 31%|███       | 42/135 [05:39<12:32,  8.09s/it] 32%|███▏      | 43/135 [05:48<12:23,  8.08s/it] 33%|███▎      | 44/135 [05:56<12:15,  8.08s/it] 33%|███▎      | 45/135 [06:04<12:22,  8.25s/it] 34%|███▍      | 46/135 [06:12<12:09,  8.20s/it] 35%|███▍      | 47/135 [06:21<12:03,  8.22s/it] 36%|███▌      | 48/135 [06:29<11:53,  8.20s/it] 36%|███▋      | 49/135 [06:37<11:42,  8.17s/it] 37%|███▋      | 50/135 [06:45<11:32,  8.15s/it] 38%|███▊      | 51/135 [06:53<11:24,  8.15s/it] 39%|███▊      | 52/135 [07:01<11:13,  8.12s/it] 39%|███▉      | 53/135 [07:09<11:06,  8.13s/it] 40%|████      | 54/135 [07:17<10:57,  8.12s/it] 41%|████      | 55/135 [07:25<10:49,  8.12s/it] 41%|████▏     | 56/135 [07:34<10:38,  8.08s/it]This is a friendly reminder - the current text generation call will exceed the model's predefined maximum length (8192). Depending on the model, you may observe exceptions, performance degradation, or nothing at all.
 42%|████▏     | 57/135 [07:46<12:21,  9.50s/it] 43%|████▎     | 58/135 [07:54<11:38,  9.07s/it] 44%|████▎     | 59/135 [08:02<11:06,  8.77s/it] 44%|████▍     | 60/135 [08:11<10:42,  8.56s/it] 45%|████▌     | 61/135 [08:19<10:25,  8.45s/it] 46%|████▌     | 62/135 [08:27<10:07,  8.32s/it] 47%|████▋     | 63/135 [08:35<09:53,  8.24s/it] 47%|████▋     | 64/135 [08:43<09:42,  8.20s/it] 48%|████▊     | 65/135 [08:51<09:33,  8.19s/it] 49%|████▉     | 66/135 [08:59<09:26,  8.21s/it] 50%|████▉     | 67/135 [09:07<09:16,  8.18s/it] 50%|█████     | 68/135 [09:16<09:07,  8.18s/it] 51%|█████     | 69/135 [09:24<08:56,  8.13s/it] 52%|█████▏    | 70/135 [09:32<08:47,  8.11s/it] 53%|█████▎    | 71/135 [09:40<08:37,  8.09s/it] 53%|█████▎    | 72/135 [09:48<08:29,  8.08s/it] 54%|█████▍    | 73/135 [09:57<08:32,  8.27s/it] 55%|█████▍    | 74/135 [10:05<08:20,  8.21s/it] 56%|█████▌    | 75/135 [10:13<08:09,  8.16s/it] 56%|█████▋    | 76/135 [10:21<08:01,  8.16s/it] 57%|█████▋    | 77/135 [10:29<07:51,  8.12s/it] 58%|█████▊    | 78/135 [10:37<07:41,  8.10s/it] 59%|█████▊    | 79/135 [10:45<07:32,  8.07s/it] 59%|█████▉    | 80/135 [10:53<07:22,  8.05s/it] 60%|██████    | 81/135 [11:01<07:16,  8.08s/it] 61%|██████    | 82/135 [11:09<07:07,  8.06s/it] 61%|██████▏   | 83/135 [11:17<07:00,  8.08s/it] 62%|██████▏   | 84/135 [11:25<06:51,  8.07s/it] 63%|██████▎   | 85/135 [11:33<06:42,  8.05s/it] 64%|██████▎   | 86/135 [11:41<06:34,  8.04s/it] 64%|██████▍   | 87/135 [11:49<06:24,  8.02s/it] 65%|██████▌   | 88/135 [11:57<06:16,  8.02s/it] 66%|██████▌   | 89/135 [12:05<06:08,  8.00s/it] 67%|██████▋   | 90/135 [12:13<06:00,  8.02s/it] 67%|██████▋   | 91/135 [12:21<05:53,  8.03s/it] 68%|██████▊   | 92/135 [12:29<05:45,  8.04s/it] 69%|██████▉   | 93/135 [12:37<05:36,  8.02s/it] 70%|██████▉   | 94/135 [12:45<05:30,  8.06s/it] 70%|███████   | 95/135 [12:54<05:23,  8.09s/it] 71%|███████   | 96/135 [13:02<05:14,  8.07s/it] 72%|███████▏  | 97/135 [13:10<05:13,  8.25s/it] 73%|███████▎  | 98/135 [13:18<05:03,  8.19s/it] 73%|███████▎  | 99/135 [13:26<04:53,  8.15s/it] 74%|███████▍  | 100/135 [13:34<04:43,  8.10s/it] 75%|███████▍  | 101/135 [13:43<04:35,  8.10s/it] 76%|███████▌  | 102/135 [13:51<04:26,  8.08s/it] 76%|███████▋  | 103/135 [13:59<04:17,  8.05s/it] 77%|███████▋  | 104/135 [14:07<04:09,  8.05s/it] 78%|███████▊  | 105/135 [14:15<04:01,  8.05s/it] 79%|███████▊  | 106/1Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func distribute
Vul Integer Overflow Func distribute
Vul Integer Overflow Func distributeToken
Vul Integer Overflow Func distributeToken
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func setPrices
Vul Integer Overflow Func setPrices
Vul Access Control Func owned
Vul Access Control Func owned
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Bad Randomness Func endCoinFlip
Vul Bad Randomness Func endCoinFlip
Vul Access Control Func onlyOwner
Vul Access Control Func onlyOwner
Vul Integer Overflow Func transfer_tokens_after_ICO
Vul Integer Overflow Func transfer_tokens_after_ICO
Vul Wrong Logic Func _deposit
Vul Wrong Logic Func _deposit
Vul Access Control Func quaker
Vul Access Control Func quaker
Vul Bad Randomness Func extcodesize
Vul Bad Randomness Func extcodesize
Vul Integer Overflow Func batchTransfer
Vul Integer Overflow Func batchTransfer
Vul Wrong Logic Func transferFrom
Vul Wrong Logic Func transferFrom
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Bad Randomness Func fallback
Vul Bad Randomness Func fallback
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Access Control Func addMeByRC
Vul Access Control Func addMeByRC
Vul Wrong Logic Func transferFrom
Vul Wrong Logic Func transferFrom
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Wrong Logic Func transferFrom
Vul Wrong Logic Func transferFrom
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Wrong Logic Func transferFrom
Vul Wrong Logic Func transferFrom
Vul Access Control Func approveAndCallcode
Vul Access Control Func approveAndCallcode
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Access Control Func breed
Vul Access Control Func breed
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func _sell
Vul Integer Overflow Func _sell
Vul Token Devalue Func doAirdrop
Vul Token Devalue Func doAirdrop
Vul Access Control Func approveAndCall
Vul Access Control Func approveAndCall
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Wrong Logic Func Not Provided
Vul Wrong Logic Func Not Provided
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func transfer
Vul Integer Overflow Func transfer
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Access Control Func sellTokenForLRC
Vul Access Control Func sellTokenForLRC
Vul Integer Overflow Func transferAny
Vul Integer Overflow Func transferAny
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Access Control Func NETM
Vul Access Control Func NETM
Vul Bad Randomness Func _addguess
Vul Bad Randomness Func _addguess
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mintTokens
Vul Integer Overflow Func mintTokens
Vul Access Control Func request_dividend
Vul Access Control Func request_dividend
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func multipleTransfer
Vul Integer Overflow Func multipleTransfer
Vul Integer Overflow Func _transfer
Vul Integer Overflow Func _transfer
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Wrong Logic Func transferFrom
Vul Wrong Logic Func transferFrom
Vul Integer Overflow Func mintlvlToken
Vul Integer Overflow Func mintlvlToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func multiTransfer
Vul Integer Overflow Func multiTransfer
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Bad Randomness Func random
Vul Bad Randomness Func random
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func setPrices
Vul Integer Overflow Func setPrices
Vul Access Control Func ToOwner
Vul Access Control Func ToOwner
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Bad Randomness Func PayWinner
Vul Bad Randomness Func PayWinner
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Typo Constructor Func Not Provided
Vul Typo Constructor Func Not Provided
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Access Control Func setOwner
Vul Access Control Func setOwner
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func transferMulti
Vul Integer Overflow Func transferMulti
Vul Bad Randomness Func determineWinner
Vul Bad Randomness Func determineWinner
Vul Bad Randomness Func randMod
Vul Bad Randomness Func randMod
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Typo Constructor Func Not Provided
Vul Typo Constructor Func Not Provided
Vul Integer Overflow Func batchTransfer
Vul Integer Overflow Func batchTransfer
Vul Integer Overflow Func transferProxy
Vul Integer Overflow Func transferProxy
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func increaseApproval
Vul Integer Overflow Func increaseApproval
Vul Bad Randomness Func random
Vul Bad Randomness Func random
Vul Access Control Func owned
Vul Access Control Func owned
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func sell
Vul Integer Overflow Func sell
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func Not Provided
Vul Integer Overflow Func Not Provided
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func Multiple Functions
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
35 [14:23<03:52,  8.03s/it] 79%|███████▉  | 107/135 [14:31<03:44,  8.02s/it] 80%|████████  | 108/135 [14:39<03:36,  8.02s/it] 81%|████████  | 109/135 [14:47<03:29,  8.05s/it] 81%|████████▏ | 110/135 [14:55<03:22,  8.09s/it] 82%|████████▏ | 111/135 [15:03<03:13,  8.05s/it] 83%|████████▎ | 112/135 [15:11<03:05,  8.05s/it] 84%|████████▎ | 113/135 [15:19<02:56,  8.04s/it] 84%|████████▍ | 114/135 [15:27<02:48,  8.03s/it] 85%|████████▌ | 115/135 [15:35<02:40,  8.01s/it] 86%|████████▌ | 116/135 [15:43<02:32,  8.03s/it] 87%|████████▋ | 117/135 [15:51<02:24,  8.02s/it] 87%|████████▋ | 118/135 [15:59<02:16,  8.01s/it] 88%|████████▊ | 119/135 [16:07<02:07,  7.99s/it] 89%|████████▉ | 120/135 [16:15<01:59,  7.99s/it] 90%|████████▉ | 121/135 [16:23<01:52,  8.03s/it] 90%|█████████ | 122/135 [16:31<01:44,  8.01s/it] 91%|█████████ | 123/135 [16:39<01:36,  8.01s/it] 92%|█████████▏| 124/135 [16:47<01:28,  8.01s/it] 93%|█████████▎| 125/135 [16:55<01:20,  8.00s/it] 93%|█████████▎| 126/135 [17:03<01:12,  8.00s/it] 94%|█████████▍| 127/135 [17:11<01:04,  8.01s/it] 95%|█████████▍| 128/135 [17:19<00:55,  8.00s/it] 96%|█████████▌| 129/135 [17:27<00:47,  7.98s/it] 96%|█████████▋| 130/135 [17:35<00:39,  8.00s/it] 97%|█████████▋| 131/135 [17:43<00:31,  8.00s/it] 98%|█████████▊| 132/135 [17:51<00:23,  7.99s/it] 99%|█████████▊| 133/135 [17:59<00:15,  7.98s/it] 99%|█████████▉| 134/135 [18:07<00:07,  8.00s/it]100%|██████████| 135/135 [18:15<00:00,  8.01s/it]100%|██████████| 135/135 [18:15<00:00,  8.12s/it]
Vul Access Control Func UBSexToken
Vul Access Control Func UBSexToken
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func distributeBTR
Vul Integer Overflow Func distributeBTR
Vul Integer Overflow Func buy
Vul Integer Overflow Func buy
Vul Access Control Func Not Provided
Vul Access Control Func Not Provided
Vul Typo Constructor Func Not Provided
Vul Typo Constructor Func Not Provided
Vul Integer Overflow Func mint
Vul Integer Overflow Func mint
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func setPrices
Vul Integer Overflow Func setPrices
Vul Integer Overflow Func batchTransfer
Vul Integer Overflow Func batchTransfer
Vul Access Control Func approveAndCallcode
Vul Access Control Func approveAndCallcode
Vul Integer Overflow Func batchTransfer
Vul Integer Overflow Func batchTransfer
Vul Token Devalue Func mintToken
Vul Token Devalue Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Access Control Func owned
Vul Access Control Func owned
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintToken
Vul Integer Overflow Func mintTokens
Vul Integer Overflow Func mintTokens
Average BLEU Score: 0.00%
Average Function Accuracy: 0.00
Average Vulnerability Accuracy: 0.00
---------------------------------------
Begin Slurm Epilog: Nov-18-2024 17:50:50
Job ID:        952270
Array Job ID:  _4294967294
User ID:       zyahn3
Account:       scs
Job name:      finetuningNxcode
Resources:     cpu=1,gres/gpu:a100=1,mem=80G,node=1
Rsrc Used:     cput=00:19:07,vmem=0,walltime=00:19:07,mem=6688K,energy_used=0
Partition:     coc-gpu
Nodes:         atl1-1-01-005-13-0
---------------------------------------
