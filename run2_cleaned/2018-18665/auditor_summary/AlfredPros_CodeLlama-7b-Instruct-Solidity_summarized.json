 
{
    "output_list": [
        {
            "function_name": "balanceOf",
            "code": "function balanceOf(address _owner) constant returns (uint256 balance)",
            "vulnerability": "Vulnerability: Reentrancy",
            "reason": "The balanceOf function does not check if the contract is disabled before returning the balance of an address. This could allow an attacker to exploit the contract by calling the balanceOf function during a reentrancy attack, leading to incorrect balance calculations."
        },
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _value) returns (bool success)",
            "vulnerability": "Vulnerability: Reentrancy",
            "reason": "The transfer function does not check if the contract is disabled before transferring tokens. This could allow an attacker to exploit the contract by calling the transfer function during a reentrancy attack, leading to incorrect balance calculations."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success)",
            "vulnerability": "Vulnerability: Reentrancy",
            "reason": "The transferFrom function does not check if the contract is disabled before transferring tokens. This could allow an attacker to exploit the contract by calling the transferFrom function during a reentrancy attack, leading to incorrect balance calculations."
        },
        {
            "function_name": "approve",
            "code": "function approve(address _spender, uint256 _value) returns (bool success)",
            "vulnerability": "Vulnerability: Reentrancy",
            "reason": "The approve function does not check if the contract is disabled before approving a spender. This could allow an attacker to exploit the contract by calling the approve function during a reentrancy attack, leading to incorrect balance calculations."
        },
        {
            "function_name": "allowance",
            "code": "function allowance(address _owner, address _spender) constant returns (uint256 remaining)",
            "vulnerability": "Vulnerability: Reentrancy",
            "reason": "The allowance function does not check if the contract is disabled before returning the allowance of a spender for an owner. This could allow an attacker to exploit the contract by calling the allowance function during a reentrancy attack, leading to incorrect balance calculations."
        }
    ]
}