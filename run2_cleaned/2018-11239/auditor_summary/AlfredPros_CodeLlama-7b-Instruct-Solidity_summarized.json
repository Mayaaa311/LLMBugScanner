 
{
    "output_list": [
        {
            "function_name": "burn",
            "code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; balanceOf[0x0] += _value; currentSupply -= _value; Burn(msg.sender, _value); return true; }",
            "vulnerability": "Unchecked Balance Subtraction",
            "reason": "The function `burn` allows users to burn their tokens, but it does not check if the user has enough tokens to burn. This could lead to a revert if the user tries to burn more tokens than they have. This vulnerability can be exploited by a malicious user to drain the contract's balance."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(allowance[_from][msg.sender] >= _value); allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
            "vulnerability": "Unchecked Allowance Subtraction",
            "reason": "The function `transferFrom` allows users to transfer tokens on behalf of others, but it does not check if the sender has enough allowance to transfer the specified amount. This could lead to a revert if the sender tries to transfer more tokens than they have allowance for. This vulnerability can be exploited by a malicious user to transfer tokens from another user's account."
        },
        {
            "function_name": "_transfer",
            "code": "function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] >= _value + burnPerTransaction); require (balanceOf[_to] + _value > balanceOf[_to]); balanceOf[_from] -= _value + burnPerTransaction; balanceOf[_to] += _value; balanceOf[0x0] += burnPerTransaction; currentSupply -= burnPerTransaction; Burn(_from, burnPerTransaction); Transfer(_from, _to, _value); }",
            "vulnerability": "Unchecked Balance Subtraction",
            "reason": "The function `_transfer` is called by `transfer` and `transferFrom`, but it does not check if the sender has enough tokens to transfer. This could lead to a revert if the sender tries to transfer more tokens than they have. This vulnerability can be exploited by a malicious user to drain the contract's balance."
        },
        {
            "function_name": "burn",
            "code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; balanceOf[0x0] += _value; currentSupply -= _value; Burn(msg.sender, _value); return true; }",
            "vulnerability": "Unchecked Balance Addition",
            "reason": "The function `burn` allows users to burn their tokens, but it does not check if the contract has enough tokens to burn. This could lead to a revert if the contract tries to burn more tokens than it has. This vulnerability can be exploited by a malicious user to drain the contract's balance."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(allowance[_from][msg.sender] >= _value); allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
            "vulnerability": "Unchecked Allowance Addition",
            "reason": "The function `transferFrom` allows users to transfer tokens on behalf of others, but it does not check if the sender has enough allowance to transfer the specified amount. This could lead to a revert if the sender tries to transfer more tokens than they have allowance for. This vulnerability can be exploited by a malicious user to transfer tokens from another user's account."
        }
    ]
}