 
{
    "output_list": [
        {
            "function_name": "mint",
            "code": "function mint(address _x, uint _v) public onlyOwner { balances[_x] += _v; totalSupply += _v; Transfer(0x0, _x, _v); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function mint() is intended to mint tokens to a given address. However, it does not check if the transfer of tokens to the address was successful. This could lead to loss of funds if the transfer fails. The transfer() function returns a boolean value indicating whether the transfer was successful. The mint() function should check this return value and revert if the transfer fails."
        },
        {
            "function_name": "foreignBuy",
            "code": "function foreignBuy(address _investor, uint _unlbValue, string _txHash) external onlyOwner { require(!paused && now >= ICO_START_DATE && now < ICO_END_DATE); require(_unlbValue > 0); unlb.mint(_investor, _unlbValue); ForeignBuy(_investor, _unlbValue, _txHash); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function foreignBuy() is intended to mint tokens to a given address from a foreign source. However, it does not check if the transfer of tokens to the address was successful. This could lead to loss of funds if the transfer fails. The transfer() function returns a boolean value indicating whether the transfer was successful. The foreignBuy() function should check this return value and revert if the transfer fails."
        },
        {
            "function_name": "finish",
            "code": "function finish(address _team, address _fund, address _bounty, address _backers) external onlyOwner { require(now >= ICO_END_DATE && !isFinished); unlb.unpause(); isFinished = true; uint _total = unlb.totalSupply() * 100 / (100 - 12 - 15 - 5 - 3); unlb.mint(_team,   (_total * 12) / 100); unlb.mint(_fund,   (_total * 15) / 100); unlb.mint(_bounty, (_total *  5) / 100); unlb.mint(_backers, (_total *  3) / 100); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function finish() is intended to distribute the tokens to the team, fund, bounty, and backers. However, it does not check if the transfer of tokens to the addresses was successful. This could lead to loss of funds if the transfer fails. The transfer() function returns a boolean value indicating whether the transfer was successful. The finish() function should check this return value and revert if the transfer fails."
        },
        {
            "function_name": "withdraw",
            "code": "function withdraw() external onlyOwner { teamWallet.transfer(this.balance); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function withdraw() is intended to transfer the remaining balance of the contract to the team wallet. However, it does not check if the transfer of funds was successful. This could lead to loss of funds if the transfer fails. The transfer() function returns a boolean value indicating whether the transfer was successful. The withdraw() function should check this return value and revert if the transfer fails."
        },
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _value) returns (bool) { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function transfer() is intended to transfer tokens from the sender's account to another account. However, it does not check if the transfer of tokens to the address was successful. This could lead to loss of funds if the transfer fails. The transfer() function returns a boolean value indicating whether the transfer was successful. The transfer() function should check this return value and revert if the transfer fails."
        }
    ]
}