{
    "output_list": [
        {
            "function_name": "mint",
            "code": "function mint(address holder, uint value) public { require(msg.sender == ico); require(value > 0); require(totalSupply + value <= TOKEN_LIMIT); balances[holder] += value; totalSupply += value; Transfer(0x0, holder, value); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function mint does not check if the transfer of tokens to the holder was successful. This could lead to loss of funds if the transfer fails. The transfer function returns a boolean value indicating whether the transfer was successful or not. The mint function should check this value and revert if the transfer fails."
        },
        {
            "function_name": "convertPresaleTokens",
            "code": "function convertPresaleTokens(address buyer, uint256 tokens, uint256 factor, string txHash) external icoAgentOnly returns (uint) { require(buyer != address(0)); require(tokens > 0); require(validState()); uint256 tokensToSell = SafeMath.add(tokensSold, tokens); require(tokensToSell <= TOKENS_FOR_SALE); tokensSold = tokensToSell;            token.mint(buyer, tokens); TokenBuyPresale(buyer, tokens, factor, txHash); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function convertPresaleTokens does not check if the transfer of tokens to the buyer was successful. This could lead to loss of funds if the transfer fails. The transfer function returns a boolean value indicating whether the transfer was successful or not. The convertPresaleTokens function should check this value and revert if the transfer fails."
        },
        {
            "function_name": "creditJackpotTokens",
            "code": "function creditJackpotTokens(address buyer, uint256 tokens, uint256 jackpot) external icoAgentOnly returns (uint) { require(buyer != address(0)); require(tokens > 0); require(validState()); token.mint(buyer, tokens); TokenWin(buyer, tokens, jackpot); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function creditJackpotTokens does not check if the transfer of tokens to the buyer was successful. This could lead to loss of funds if the transfer fails. The transfer function returns a boolean value indicating whether the transfer was successful or not. The creditJackpotTokens function should check this value and revert if the transfer fails."
        },
        {
            "function_name": "buyTokens",
            "code": "function buyTokens(address buyer, uint256 tokens, uint256 factor, string txHash) external icoAgentOnly returns (uint) { require(buyer != address(0)); require(tokens > 0); require(validState()); uint256 tokensToSell = SafeMath.add(tokensSold, tokens); require(tokensToSell <= TOKENS_FOR_SALE); tokensSold = tokensToSell;            token.mint(buyer, tokens); TokenBuy(buyer, tokens, factor, txHash); }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function buyTokens does not check if the transfer of tokens to the buyer was successful. This could lead to loss of funds if the transfer fails. The transfer function returns a boolean value indicating whether the transfer was successful or not. The buyTokens function should check this value and revert if the transfer fails."
        },
        {
            "function_name": "setMigrationAgent",
            "code": "function setMigrationAgent(address _agent) external { require(migrationAgent == 0); require(msg.sender == migrationMaster); migrationAgent = _agent; }",
            "vulnerability": "Unchecked Return Value",
            "reason": "The function setMigrationAgent does not check if the transfer of tokens to the buyer was successful. This could lead to loss of funds if the transfer fails. The transfer function returns a boolean value indicating whether the transfer was successful or not. The setMigrationAgent function should check this value and revert if the transfer fails."
        }
    ]
}