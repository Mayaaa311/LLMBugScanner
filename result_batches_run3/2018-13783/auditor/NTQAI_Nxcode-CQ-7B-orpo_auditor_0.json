{
    "output_list": [
        {
            "function_name": "TokenERC20",
            "code": "function TokenERC20(uint256 initialSupply, uint8 initialDecimals, string tokenName, string tokenSymbol) public { decimals = initialDecimals; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",
            "vulnerability": "Integer Overflow",
            "reason": "The initialSupply is multiplied by 10 ** uint256(decimals) without checking for integer overflow. If initialSupply is too large, it may cause an overflow and result in incorrect totalSupply."
        },
        {
            "function_name": "TokenERC20",
            "code": "function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] >= _value); require (balanceOf[_to] + _value >= balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; emit Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
            "vulnerability": "Integer Overflow",
            "reason": "The balanceOf[_from] -= _value and balanceOf[_to] += _value operations may cause an integer overflow if _value is too large. If _value is greater than the current balance of _from or the remaining balance of _to, it may result in incorrect balance values."
        },
        {
            "function_name": "TokenERC20",
            "code": "function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); }",
            "vulnerability": "Integer Overflow",
            "reason": "The _transfer function is called without checking for integer overflow. If _value is too large, it may cause an overflow and result in incorrect balance values."
        },
        {
            "function_name": "TokenERC20",
            "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { if (_value <= allowance[_from][msg.sender]) { allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } else return false; }",
            "vulnerability": "Integer Overflow",
            "reason": "The _transfer function is called without checking for integer overflow. If _value is too large, it may cause an overflow and result in incorrect balance values."
        },
        {
            "function_name": "TokenERC20",
            "code": "function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "The allowance[msg.sender][_spender] = _value operation may cause an integer overflow if _value is too large. If _value is greater than the remaining balance of msg.sender, it may result in incorrect allowance values."
        }
    ]
}