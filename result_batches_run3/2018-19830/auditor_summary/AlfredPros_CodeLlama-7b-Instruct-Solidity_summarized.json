 
{
    "output_list": [
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable { if (frozenAccount[_to]) { InvalidAccount(_to, "The receiver account is frozen"); } else { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); } }",
            "vulnerability": "Access Control",
            "reason": "The function `transfer` does not check if the sender has sufficient balance to transfer. This can lead to a revert if the sender does not have enough balance. This vulnerability can be exploited by an attacker who has more balance than the sender. The solution is to add a check to ensure that the sender has sufficient balance before transferring."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{ var _allowance = allowed[_from][msg.sender]; require(!frozenAccount[_from]&&!frozenAccount[_to]); balances[_to] = balances[_to].add(_value); balances[_from] = balances[_from].sub(_value); allowed[_from][msg.sender] = _allowance.sub(_value); Transfer(_from, _to, _value); }",
            "vulnerability": "Access Control",
            "reason": "The function `transferFrom` does not check if the sender has sufficient allowance to transfer. This can lead to a revert if the sender does not have enough allowance. This vulnerability can be exploited by an attacker who has more allowance than the sender. The solution is to add a check to ensure that the sender has sufficient allowance before transferring."
        },
        {
            "function_name": "switchLiquidity",
            "code": "function switchLiquidity (bool _transferable) onlyOwner returns (bool success) { transferable=_transferable; return true; }",
            "vulnerability": "Access Control",
            "reason": "The function `switchLiquidity` does not check if the caller is the owner. This can lead to a revert if the caller is not the owner. This vulnerability can be exploited by an attacker who is not the owner. The solution is to add a check to ensure that the caller is the owner before switching the liquidity."
        },
        {
            "function_name": "UBSexToken",
            "code": "function UBSexToken() { owner = msg.sender; totalSupply = 1.9 * 10 ** 26; balances[owner] = totalSupply; }",
            "vulnerability": "Typo Constructor",
            "reason": "The constructor function `UBSexToken` has a typo in the function name. The correct function name is `UBSexToken`. This typo can lead to confusion and errors. The solution is to correct the function name to `UBSexToken`."
        },
        {
            "function_name": "UBSexToken",
            "code": "function UBSexToken() { owner = msg.sender; totalSupply = 1.9 * 10 ** 26; balances[owner] = totalSupply; }",
            "vulnerability": "Token Devalue",
            "reason": "The token `UBSexToken` has a fixed total supply of 1.9 * 10 ** 26. This means that the token will be devalued over time as the total supply is fixed. This vulnerability can be exploited by an attacker who buys the token at a high price and then sells it at a low price. The solution is to increase the total supply of the token over time to prevent devaluation."
        }
    ]
}