 
{
    "output_list": [
        {
            "function_name": "sellOffline",
            "code": "function sellOffline(address rec_address,uint256 token_amount) public onlyOwner 
{
    if (remaining > 0)
    {    
        uint finalTokens =  (token_amount  * (10 ** 18));              
        if(finalTokens < remaining)
            {    
                remaining = remaining - finalTokens;    
                _transfer(owner,rec_address, finalTokens);    
                TransferSell(owner, rec_address, finalTokens,'Offline');    
            }    
        else
            {    
                revert();    
            }    
    }    
    else
    {    
        revert();    
    }    
}
",
            "vulnerability": "Integer Overflow",
            "reason": "In the sellOffline function, the variable 'finalTokens' is calculated by multiplying 'token_amount' with 10^18. If 'token_amount' is large enough, the result of this multiplication could potentially cause an integer overflow. This could lead to the remaining tokens being reduced to a negative value, which is not a valid state for the remaining tokens."
        },
        {
            "function_name": "setEthRate",
            "code": "function setEthRate (uint newEthRate) public  onlyOwner                    
{
    ethRate = newEthRate;
}
",
            "vulnerability": "Integer Overflow",
            "reason": "In the setEthRate function, the variable 'newEthRate' is directly assigned to the 'ethRate' variable without any checks. If 'newEthRate' is large enough, it could potentially cause an integer overflow, leading to the 'ethRate' variable being set to a negative value."
        },
        {
            "function_name": "setTokenPrice",
            "code": "function setTokenPrice (uint newTokenRate) public  onlyOwner               
{
    icoTokenPrice = newTokenRate;
}
",
            "vulnerability": "Integer Overflow",
            "reason": "In the setTokenPrice function, the variable 'newTokenRate' is directly assigned to the 'icoTokenPrice' variable without any checks. If 'newTokenRate' is large enough, it could potentially cause an integer overflow, leading to the 'icoTokenPrice' variable being set to a negative value."
        },
        {
            "function_name": "setTransferStatus",
            "code": "function setTransferStatus (uint status) public  onlyOwner                 
{
    allowTransferToken = status;
}
",
            "vulnerability": "Wrong Logic",
            "reason": "In the setTransferStatus function, the variable 'status' is directly assigned to the 'allowTransferToken' variable without any checks. If 'status' is not a valid value (0 or 1), it could potentially cause the 'allowTransferToken' variable to be set to an invalid value, which could lead to unexpected behavior."
        },
        {
            "function_name": "changeIcoStatus",
            "code": "function changeIcoStatus (uint8 statx)  public onlyOwner                   
{
    icoStatus = statx;
}
",
            "vulnerability": "Wrong Logic",
            "reason": "In the changeIcoStatus function, the variable 'statx' is directly assigned to the 'icoStatus' variable without any checks. If 'statx' is not a valid value (1, 2, 3, or 4), it could potentially cause the 'icoStatus' variable to be set to an invalid value, which could lead to unexpected behavior."
        }
    ]
}