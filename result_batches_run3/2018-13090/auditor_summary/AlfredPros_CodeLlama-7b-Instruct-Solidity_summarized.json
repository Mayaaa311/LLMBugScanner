 
{
    "output_list": [
        {
            "function_name": "TokenERC20",
            "code": "function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",
            "vulnerability": "Integer Overflow",
            "reason": "The initialSupply is multiplied by 10 ** uint256(decimals) without checking if the result will overflow. This could lead to an incorrect totalSupply and potentially incorrect balanceOf values for the contract owner."
        },
        {
            "function_name": "TokenERC20",
            "code": "function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] >= _value); require (balanceOf[_to] + _value > balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
            "vulnerability": "Integer Overflow",
            "reason": "The balanceOf[_from] -= _value and balanceOf[_to] += _value operations could potentially lead to an integer overflow if _value is very large. This could result in incorrect balanceOf values for the _from and _to addresses."
        },
        {
            "function_name": "YiTongCoin",
            "code": "function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] >= _value); require (balanceOf[_to] + _value > balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
            "vulnerability": "Integer Overflow",
            "reason": "The balanceOf[_from] -= _value and balanceOf[_to] += _value operations could potentially lead to an integer overflow if _value is very large. This could result in incorrect balanceOf values for the _from and _to addresses."
        },
        {
            "function_name": "YiTongCoin",
            "code": "function buy() payable public { uint amount = msg.value / buyPrice; _transfer(this, msg.sender, amount); }",
            "vulnerability": "Integer Overflow",
            "reason": "The amount = msg.value / buyPrice operation could potentially lead to an integer overflow if msg.value is very large. This could result in incorrect balanceOf values for the contract and the sender."
        },
        {
            "function_name": "YiTongCoin",
            "code": "function sell(uint256 amount) public { require(this.balance >= amount * sellPrice); _transfer(msg.sender, this, amount); msg.sender.transfer(amount * sellPrice); }",
            "vulnerability": "Integer Overflow",
            "reason": "The amount * sellPrice operation could potentially lead to an integer overflow if amount is very large. This could result in incorrect balanceOf values for the contract and the sender."
        }
    ]
}