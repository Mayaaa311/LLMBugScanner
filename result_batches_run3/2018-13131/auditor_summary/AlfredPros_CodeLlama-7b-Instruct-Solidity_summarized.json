 
{
    "output_list": [
        {
            "function_name": "mint",
            "code": "function mint(address holder, uint value) { require(msg.sender == preSale); require(value > 0); require(totalSupply + value <= TOKEN_LIMIT); balances[holder] += value; totalSupply += value; Transfer(0x0, holder, value); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function mint() is vulnerable to integer overflow. The line 'balances[holder] += value;' can cause an overflow if the total supply of tokens exceeds the maximum limit (TOKEN_LIMIT)."
        },
        {
            "function_name": "unfreeze",
            "code": "function unfreeze() external { require(msg.sender == team); isFrozen = false; }",
            "vulnerability": "Access Control",
            "reason": "The function unfreeze() is accessible to anyone, which can lead to unauthorized token transfers. The modifier 'teamOnly' should be used to restrict access to this function."
        },
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint _value) public returns (bool) { require(!isFrozen); return super.transfer(_to, _value); }",
            "vulnerability": "Access Control",
            "reason": "The function transfer() is accessible to anyone, which can lead to unauthorized token transfers. The modifier 'teamOnly' should be used to restrict access to this function."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint _value) public returns (bool) { require(!isFrozen); return super.transferFrom(_from, _to, _value); }",
            "vulnerability": "Access Control",
            "reason": "The function transferFrom() is accessible to anyone, which can lead to unauthorized token transfers. The modifier 'teamOnly' should be used to restrict access to this function."
        },
        {
            "function_name": "approve",
            "code": "function approve(address _spender, uint _value) public returns (bool) { require(!isFrozen); return super.approve(_spender, _value); }",
            "vulnerability": "Access Control",
            "reason": "The function approve() is accessible to anyone, which can lead to unauthorized token approvals. The modifier 'teamOnly' should be used to restrict access to this function."
        }
    ]
}