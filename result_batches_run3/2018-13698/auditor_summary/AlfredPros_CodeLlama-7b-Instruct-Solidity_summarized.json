 
{
    "output_list": [
        {
            "function_name": "mintTokens",
            "code": "function mintTokens(address _investor) external onlyOwner { balances[_investor] +=  promoValue; totalSupply += promoValue; Transfer(0x0, _investor, promoValue); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function mintTokens is vulnerable to integer overflow. The addition of promoValue to balances[_investor] and totalSupply can cause an overflow if the sum exceeds the maximum value that can be stored in a uint256. This can be exploited by an attacker to mint an unauthorized amount of tokens."
        },
        {
            "function_name": "setPromo",
            "code": "function setPromo(uint256 _newValue) external onlyOwner { promoValue = _newValue; }",
            "vulnerability": "Access Control",
            "reason": "The function setPromo is vulnerable to access control. Only the owner of the contract can call this function, but it does not check if the new value is within a reasonable range. An attacker can use this function to set the promoValue to an extremely high value, which can lead to a loss of funds for the contract owner."
        },
        {
            "function_name": "balanceOf",
            "code": "function balanceOf(address _investor) public constant returns(uint256) { return balances[_investor]; }",
            "vulnerability": "Typo Constructor",
            "reason": "The function balanceOf is named incorrectly. It should be named balanceOf instead of balanceOf. This typo can lead to confusion and misuse of the function."
        },
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint _amount) public returns (bool) { balances[msg.sender] -= _amount; balances[_to] -= _amount; Transfer(msg.sender, _to, _amount); return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "The function transfer is vulnerable to integer overflow. The subtraction of _amount from both balances[msg.sender] and balances[_to] can cause an overflow if the amount is greater than the current balance. This can be exploited by an attacker to transfer an unauthorized amount of tokens."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint _amount) public returns (bool) { balances[_from] -= _amount; allowed[_from][msg.sender] -= _amount; balances[_to] -= _amount; Transfer(_from, _to, _amount); return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "The function transferFrom is vulnerable to integer overflow. The subtraction of _amount from both balances[_from] and allowed[_from][msg.sender] can cause an overflow if the amount is greater than the current balance. This can be exploited by an attacker to transfer an unauthorized amount of tokens."
        }
    ]
}