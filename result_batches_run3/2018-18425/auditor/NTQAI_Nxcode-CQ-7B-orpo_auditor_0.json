{
    "output_list": [
        {
            "function_name": "getTokens",
            "code": "function getTokens() payable canDistr  public { uint256 tokens = 0; require( msg.value >= minContribution ); require( msg.value > 0 ); tokens = tokensPerEth.mul(msg.value) / 1 ether; address investor = msg.sender; if (tokens > 0) { distr(investor, tokens); } if (totalDistributed >= totalSupply) { distributionFinished = true; } }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `getTokens` function, the calculation of `tokens` is vulnerable to integer overflow. The multiplication of `tokensPerEth` and `msg.value` may result in an overflow if the product is greater than the maximum value that can be stored in a uint256 variable. This can lead to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "distr",
            "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount); balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `distr` function, the addition of `_amount` to `totalDistributed` and `balances[_to]` may result in an integer overflow if the sum is greater than the maximum value that can be stored in a uint256 variable. This can lead to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "burn",
            "code": "function burn(uint256 _value) onlyOwner public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply = totalSupply.sub(_value); totalDistributed = totalDistributed.sub(_value); emit Burn(burner, _value); }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `burn` function, the subtraction of `_value` from `balances[msg.sender]`, `totalSupply`, and `totalDistributed` may result in an integer overflow if the subtraction results in a negative value. This can lead to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "adminClaimAirdrop",
            "code": "function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner { doAirdrop(_participant, _amount); }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `adminClaimAirdrop` function, the addition of `_amount` to `totalDistributed` may result in an integer overflow if the sum is greater than the maximum value that can be stored in a uint256 variable. This can lead to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "adminClaimAirdropMultiple",
            "code": "function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner { for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount); }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `adminClaimAirdropMultiple` function, the addition of `_amount` to `totalDistributed` may result in an integer overflow if the sum is greater than the maximum value that can be stored in a uint256 variable. This can lead to incorrect calculations and potentially loss of funds."
        }
    ]
}