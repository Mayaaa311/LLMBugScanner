{
    "output_list": [
        {
            "function_name": "mint",
            "code": "function mint(address _holder, uint _value) external { require(msg.sender == presale); require(_value > 0); require(totalSupply + _value <= TOKEN_LIMIT); balances[_holder] += _value; totalSupply += _value; Transfer(0x0, _holder, _value); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `mint` is vulnerable to integer overflow. The line `totalSupply += _value;` can cause an overflow if the total supply of tokens exceeds the maximum limit `TOKEN_LIMIT`. This can be exploited by a malicious user to mint more tokens than the maximum limit, leading to a loss of funds for the contract owner."
        },
        {
            "function_name": "buyTokens",
            "code": "function buyTokens(address _buyer, uint256 _value) internal returns (uint) { require(_buyer != address(0)); require(_value > 0); require(preSaleState == PreSaleState.PreSaleStarted); require(!isPaused); uint256 boughtTokens = _value / pricePerToken; require(boughtTokens > 0); token.mint(_buyer, boughtTokens); TokenBuy(_buyer, boughtTokens); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `buyTokens` is also vulnerable to integer overflow. The line `uint256 boughtTokens = _value / pricePerToken;` can cause an overflow if the value of tokens to be bought exceeds the maximum limit `TOKEN_LIMIT`. This can be exploited by a malicious user to buy more tokens than the maximum limit, leading to a loss of funds for the contract owner."
        },
        {
            "function_name": "buyTokens",
            "code": "function buyTokens(address _buyer, uint256 _value) internal returns (uint) { require(_buyer != address(0)); require(_value > 0); require(preSaleState == PreSaleState.PreSaleStarted); require(!isPaused); uint256 boughtTokens = _value / pricePerToken; require(boughtTokens > 0); token.mint(_buyer, boughtTokens); TokenBuy(_buyer, boughtTokens); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `buyTokens` is also vulnerable to integer overflow. The line `uint256 boughtTokens = _value / pricePerToken;` can cause an overflow if the value of tokens to be bought exceeds the maximum limit `TOKEN_LIMIT`. This can be exploited by a malicious user to buy more tokens than the maximum limit, leading to a loss of funds for the contract owner."
        }
    ]
}