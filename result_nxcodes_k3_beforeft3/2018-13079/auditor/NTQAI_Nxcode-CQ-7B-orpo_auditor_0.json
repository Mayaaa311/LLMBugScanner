{
    "output_list": [
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); }",
            "vulnerability": "Integer Overflow",
            "reason": "The transfer function does not check if the recipient's balance will overflow. If the recipient's balance is greater than the maximum possible value for a uint256, the transfer will fail. This can be exploited by sending a large amount of tokens to a contract that does not have enough balance to receive them."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]);     allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "The transferFrom function does not check if the recipient's balance will overflow. If the recipient's balance is greater than the maximum possible value for a uint256, the transfer will fail. This can be exploited by sending a large amount of tokens to a contract that does not have enough balance to receive them."
        },
        {
            "function_name": "burn",
            "code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value);   balanceOf[msg.sender] -= _value;            totalSupply -= _value;                      Burn(msg.sender, _value); return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "The burn function does not check if the sender's balance will overflow. If the sender's balance is greater than the maximum possible value for a uint256, the burn will fail. This can be exploited by burning a large amount of tokens from a contract that does not have enough balance to burn them."
        }
    ]
}