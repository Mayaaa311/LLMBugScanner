{
    "output_list": [
        {
            "function_name": "sellOffline",
            "code": "function sellOffline(address rec_address,uint256 token_amount) public onlyOwner 
{
    if (remaining > 0)
    {
        uint finalTokens =  (token_amount  * (10 ** 18));              
        if(finalTokens < remaining)
            {
                remaining = remaining - finalTokens;
                _transfer(owner,rec_address, finalTokens);    
                TransferSell(owner, rec_address, finalTokens,'Offline');
            }
        else
            {
                revert();
            }
    }
    else
    {
        revert();
    }
}",
            "vulnerability": "Integer Overflow",
            "reason": "In the sellOffline function, the variable 'finalTokens' is calculated by multiplying 'token_amount' with 10^18. If 'token_amount' is large enough, the result of this multiplication could potentially exceed the maximum value that can be stored in a uint256 variable. This could lead to an integer overflow, which could result in the contract's state being corrupted and potentially leading to loss of funds or other unintended consequences."
        },
        {
            "function_name": "getConBal",
            "code": "function getConBal() onlyOwner public constant returns  (uint)            
{
    return this.balance;
}",
            "vulnerability": "Access Control",
            "reason": "In the getConBal function, the contract owner is required to call this function. However, the function does not check whether the caller is the contract owner or not. This could potentially allow anyone to call this function and obtain the contract's balance, potentially leading to unauthorized access to the contract's funds."
        },
        {
            "function_name": "getEthRate",
            "code": "function getEthRate() onlyOwner public constant returns  (uint)            
{
    return ethRate;
}",
            "vulnerability": "Access Control",
            "reason": "In the getEthRate function, the contract owner is required to call this function. However, the function does not check whether the caller is the contract owner or not. This could potentially allow anyone to call this function and obtain the contract's ethRate, potentially leading to unauthorized access to the contract's ethRate."
        }
    ]
}