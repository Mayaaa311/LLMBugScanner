{
    "output_list": [
        {
            "function_name": "convertPresaleTokens",
            "code": "function convertPresaleTokens(address buyer, uint256 tokens, uint256 factor, string txHash) external icoAgentOnly returns (uint) { require(buyer != address(0)); require(tokens > 0); require(validState()); uint256 tokensToSell = SafeMath.add(tokensSold, tokens); require(tokensToSell <= TOKENS_FOR_SALE); tokensSold = tokensToSell;            token.mint(buyer, tokens); TokenBuyPresale(buyer, tokens, factor, txHash); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `convertPresaleTokens` is vulnerable to integer overflow. The variable `tokensSold` is incremented by `tokens` in each call, but there is no check to ensure that the addition does not exceed the maximum value of `uint256`. This could lead to an incorrect value of `tokensSold` and potentially allow for a larger number of tokens to be sold than intended."
        },
        {
            "function_name": "buyTokens",
            "code": "function buyTokens(address buyer, uint256 tokens, uint256 factor, string txHash) external icoAgentOnly returns (uint) { require(buyer != address(0)); require(tokens > 0); require(validState()); uint256 tokensToSell = SafeMath.add(tokensSold, tokens); require(tokensToSell <= TOKENS_FOR_SALE); tokensSold = tokensToSell;            token.mint(buyer, tokens); TokenBuy(buyer, tokens, factor, txHash); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `buyTokens` is also vulnerable to integer overflow. Similar to `convertPresaleTokens`, the variable `tokensSold` is incremented by `tokens` in each call, but there is no check to ensure that the addition does not exceed the maximum value of `uint256`. This could lead to an incorrect value of `tokensSold` and potentially allow for a larger number of tokens to be sold than intended."
        },
        {
            "function_name": "creditJackpotTokens",
            "code": "function creditJackpotTokens(address buyer, uint256 tokens, uint256 jackpot) external icoAgentOnly returns (uint) { require(buyer != address(0)); require(tokens > 0); require(validState()); token.mint(buyer, tokens); TokenWin(buyer, tokens, jackpot); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `creditJackpotTokens` is also vulnerable to integer overflow. Similar to `convertPresaleTokens` and `buyTokens`, the variable `tokensSold` is incremented by `tokens` in each call, but there is no check to ensure that the addition does not exceed the maximum value of `uint256`. This could lead to an incorrect value of `tokensSold` and potentially allow for a larger number of tokens to be sold than intended."
        }
    ]
}