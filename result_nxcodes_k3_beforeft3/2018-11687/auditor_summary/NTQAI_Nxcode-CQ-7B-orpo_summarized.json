{
    "output_list": [
        {
            "function_name": "totalSupply",
            "code": "function totalSupply() constant returns (uint256 totalSupply) { totalSupply = _totalSupply; }",
            "vulnerability": "Integer Overflow",
            "reason": "The totalSupply variable is declared as a uint256, which means it can hold values up to 2^256 - 1. However, the _totalSupply variable is initialized with a value of 21000000 * 10^8, which is greater than the maximum value that can be held by a uint256. This means that the totalSupply variable will overflow and become zero, causing the contract to return an incorrect total supply value."
        },
        {
            "function_name": "distributeBTR",
            "code": "function distributeBTR(address[] addresses) onlyOwner { for (uint i = 0; i < addresses.length; i++) { balances[owner] -= 2000 * 10**8; balances[addresses[i]] += 2000 * 10**8; Transfer(owner, addresses[i], 2000 * 10**8); } }",
            "vulnerability": "Integer Overflow",
            "reason": "The distributeBTR function subtracts 2000 * 10^8 from the owner's balance and adds it to the balance of each address in the addresses array. However, if the owner's balance is less than 2000 * 10^8, this operation will cause an integer overflow and result in the owner's balance being set to zero. This will also cause the balances of the addresses in the addresses array to be increased by 2000 * 10^8, which is not intended. To fix this vulnerability, the function should subtract 2000 * 10^8 from the owner's balance before performing the transfer operation."
        },
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _amount) returns (bool success) { if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) { balances[msg.sender] -= _amount; balances[_to] += _amount; Transfer(msg.sender, _to, _amount); return true; } else { return false; } }",
            "vulnerability": "Integer Overflow",
            "reason": "The transfer function subtracts _amount from the sender's balance and adds it to the recipient's balance. However, if the sender's balance is less than _amount, this operation will cause an integer overflow and result in the sender's balance being set to zero. This will also cause the recipient's balance to be increased by _amount, which is not intended. To fix this vulnerability, the function should subtract _amount from the sender's balance before performing the transfer operation."
        }
    ]
}