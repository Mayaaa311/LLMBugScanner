{
    "output_list": [
        {
            "function_name": "stake",
            "code": "function stake(uint256 amount) external nonReentrant updateReward(msg.sender) { require(amount > 0, u201cCannot stake 0u201d); stakedSupply += amount; stakes[msg.sender] += amount; _transferTokens(msg.sender, address(this), amount); emit Staked(msg.sender, amount); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function stake() takes an input amount and adds it to the stakedSupply. However, the stakedSupply is not checked for overflow. If the amount is too large, it could cause an integer overflow, leading to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "unstake",
            "code": "function unstake(uint amount) public nonReentrant updateReward(msg.sender) { require(amount > 0, u201cCannot withdraw 0u201d); stakedSupply -= amount; stakes[msg.sender] -= amount; _transferTokens(address(this), msg.sender, amount); emit Unstaked(msg.sender, amount); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function unstake() takes an input amount and subtracts it from the stakedSupply. However, the stakedSupply is not checked for underflow. If the amount is too large, it could cause an integer underflow, leading to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "notifyFeeAmount",
            "code": "function notifyFeeAmount(uint reward) internal updateReward(address(0)) { if (block.timestamp >= periodFinish) { rewardRate = reward / DURATION; } else { uint remaining = periodFinish - block.timestamp; uint leftover = remaining * rewardRate; rewardRate = (reward + leftover) / DURATION; } uint balance = balances[address(this)]; require(rewardRate <= balance / DURATION, u201cProvided reward too highu201d); lastUpdateTime = block.timestamp; periodFinish = block.timestamp + DURATION; emit Fees(reward); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function notifyFeeAmount() takes an input reward and calculates the rewardRate based on the reward and the DURATION. However, the rewardRate is not checked for overflow. If the reward is too large, it could cause an integer overflow, leading to incorrect results and potentially loss of funds."
        }
    ]
}