{
    "output_list": [
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _value) public { if (balanceOf[msg.sender] < _value) revert();           if (balanceOf[_to] + _value < balanceOf[_to]) revert(); ...",
            "vulnerability": "Integer Overflow",
            "reason": "The transfer function does not check for integer overflow when adding the transferred amount to the recipient's balance. This could lead to an overflow if the recipient's balance exceeds the maximum value that can be stored in a uint256 variable. This could be exploited by an attacker to steal tokens from the recipient."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { if (balanceOf[_from] < _value) revert();                 if (balanceOf[_to] + _value < balanceOf[_to]) revert();  ...",
            "vulnerability": "Integer Overflow",
            "reason": "The transferFrom function does not check for integer overflow when adding the transferred amount to the recipient's balance. This could lead to an overflow if the recipient's balance exceeds the maximum value that can be stored in a uint256 variable. This could be exploited by an attacker to steal tokens from the recipient."
        },
        {
            "function_name": "mintToken",
            "code": "function mintToken(address target, uint256 mintedAmount) public onlyOwner { balanceOf[target] += mintedAmount; Transfer(0, owner, mintedAmount); Transfer(owner, target, mintedAmount); }",
            "vulnerability": "Integer Overflow",
            "reason": "The mintToken function does not check for integer overflow when adding the minted amount to the target's balance. This could lead to an overflow if the target's balance exceeds the maximum value that can be stored in a uint256 variable. This could be exploited by an attacker to steal tokens from the target."
        }
    ]
}