{
    "output_list": [
        {
            "function_name": "getTokens",
            "code": "function getTokens() payable canDistr  public { uint256 tokens = 0; require( msg.value >= minContribution ); require( msg.value > 0 ); tokens = tokensPerEth.mul(msg.value) / 1 ether; address investor = msg.sender; if (tokens > 0) { distr(investor, tokens); } if (totalDistributed >= totalSupply) { distributionFinished = true; } }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `getTokens` function, the calculation of `tokens` is vulnerable to integer overflow. The multiplication of `tokensPerEth` and `msg.value` can result in an overflow if `tokensPerEth` is large enough. This can be exploited by sending a large amount of ETH to the contract, causing the `tokens` variable to exceed the maximum value that can be stored in a uint256 variable. This could lead to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "distr",
            "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount);         balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `distr` function, the addition of `_amount` to `totalDistributed` and the addition of `_amount` to the balance of `_to` can result in an overflow if `_amount` is large enough. This can be exploited by sending a large amount of tokens to the contract, causing the `totalDistributed` variable to exceed the maximum value that can be stored in a uint256 variable. This could lead to incorrect calculations and potentially loss of tokens."
        },
        {
            "function_name": "burn",
            "code": "function burn(uint256 _value) onlyOwner public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply = totalSupply.sub(_value); totalDistributed = totalDistributed.sub(_value); emit Burn(burner, _value); }",
            "vulnerability": "Integer Overflow",
            "reason": "In the `burn` function, the subtraction of `_value` from `balances[msg.sender]`, `totalSupply`, and `totalDistributed` can result in an overflow if `_value` is large enough. This can be exploited by burning a large amount of tokens, causing the `balances[msg.sender]`, `totalSupply`, and `totalDistributed` variables to exceed the maximum value that can be stored in a uint256 variable. This could lead to incorrect calculations and potentially loss of tokens."
        }
    ]
}