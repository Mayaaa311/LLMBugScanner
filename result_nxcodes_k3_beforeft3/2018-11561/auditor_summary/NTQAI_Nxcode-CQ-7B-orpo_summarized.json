{
    "output_list": [
        {
            "function_name": "distributeToken",
            "code": "function distributeToken(address[] addresses, uint256 _value) { for (uint i = 0; i < addresses.length; i++) { balances[msg.sender] -= _value; balances[addresses[i]] += _value; Transfer(msg.sender, addresses[i], _value); } }",
            "vulnerability": "Integer Overflow",
            "reason": "In the distributeToken function, the sender's balance is decreased by _value before the transfer is made. However, the sender's balance is not checked for overflow before the transfer. This could lead to a situation where the sender's balance becomes negative, which is not allowed in this ERC20 token contract. This could be exploited by an attacker to drain the contract's balance."
        },
        {
            "function_name": "ERC20Token",
            "code": "function ERC20Token() { totalSupply = 12 * 10 ** 24; balances[msg.sender] = totalSupply; name = "EETHER"; decimals = 18; symbol = "EETHER"; }",
            "vulnerability": "Integer Overflow",
            "reason": "In the ERC20Token constructor, the totalSupply is set to 12 * 10 ** 24. However, this value is not checked for overflow before being assigned to the totalSupply variable. This could lead to a situation where the totalSupply becomes too large, which is not allowed in this ERC20 token contract. This could be exploited by an attacker to create a token with an excessive supply."
        },
        {
            "function_name": "ERC20Token",
            "code": "function ERC20Token() { totalSupply = 12 * 10 ** 24; balances[msg.sender] = totalSupply; name = "EETHER"; decimals = 18; symbol = "EETHER"; }",
            "vulnerability": "Integer Overflow",
            "reason": "In the ERC20Token constructor, the totalSupply is set to 12 * 10 ** 24. However, this value is not checked for overflow before being assigned to the totalSupply variable. This could lead to a situation where the totalSupply becomes too large, which is not allowed in this ERC20 token contract. This could be exploited by an attacker to create a token with an excessive supply."
        }
    ]
}