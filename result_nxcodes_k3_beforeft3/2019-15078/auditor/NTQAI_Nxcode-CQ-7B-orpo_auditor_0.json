{
    "output_list": [
        {
            "function_name": "getTokens",
            "code": "function getTokens() payable canDistr onlyWhitelist public { if (value > totalRemaining) { value = totalRemaining; } require(value <= totalRemaining); address investor = msg.sender; uint256 toGive = value; distr(investor, toGive); if (toGive > 0) { blacklist[investor] = true; } if (totalDistributed >= totalSupply) { distributionFinished = true; } value = value.div(100000).mul(99999); }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `getTokens` has an integer overflow vulnerability. The variable `value` is updated in the line `value = value.div(100000).mul(99999);`. If `value` is very large, the multiplication operation may cause an integer overflow. This can lead to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "distr",
            "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount); totalRemaining = totalRemaining.sub(_amount); balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; if (totalDistributed >= totalSupply) { distributionFinished = true; } }",
            "vulnerability": "Integer Overflow",
            "reason": "The function `distr` has an integer overflow vulnerability. The variable `totalDistributed` is updated in the line `totalDistributed = totalDistributed.add(_amount);`. If `_amount` is very large, the addition operation may cause an integer overflow. This can lead to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "getTokens",
            "code": "function getTokens() payable canDistr onlyWhitelist public { if (value > totalRemaining) { value = totalRemaining; } require(value <= totalRemaining); address investor = msg.sender; uint256 toGive = value; distr(investor, toGive); if (toGive > 0) { blacklist[investor] = true; } if (totalDistributed >= totalSupply) { distributionFinished = true; } value = value.div(100000).mul(99999); }",
            "vulnerability": "Access Control",
            "reason": "The function `getTokens` has an access control vulnerability. The modifier `onlyWhitelist` is used to restrict access to the function. However, the variable `blacklist` is not initialized or updated, so any address can bypass this restriction. This can lead to unauthorized access to the function and potentially loss of funds."
        }
    ]
}