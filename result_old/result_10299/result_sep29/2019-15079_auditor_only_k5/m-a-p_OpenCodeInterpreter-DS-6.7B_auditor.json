{
    "output_list": [
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The transfer function calls the internal _transfer function, which can be called again before the _transfer function is finished. This can lead to re-entrancy attacks where the contract is called again before it is ready to handle the next transaction."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The transferFrom function calls the internal _transfer function, which can be called again before the _transfer function is finished. This can lead to re-entrancy attacks where the contract is called again before it is ready to handle the next transaction."
        },
        {
            "function_name": "burn",
            "code": "function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   \n        balanceOf[msg.sender] -= _value;            \n        totalSupply -= _value;                      \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The burn function calls the internal _transfer function, which can be called again before the _transfer function is finished. This can lead to re-entrancy attacks where the contract is called again before it is ready to handle the next transaction."
        },
        {
            "function_name": "burnFrom",
            "code": "function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                \n        require(_value <= allowance[_from][msg.sender]);    \n        balanceOf[_from] -= _value;                         \n        allowance[_from][msg.sender] -= _value;             \n        totalSupply -= _value;                              \n        emit Burn(_from, _value);\n        return true;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The burnFrom function calls the internal _transfer function, which can be called again before the _transfer function is finished. This can lead to re-entrancy attacks where the contract is called again before it is ready to handle the next transaction."
        },
        {
            "function_name": "EAI_TokenERC20",
            "code": "function EAI_TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \n        balanceOf[msg.sender] = totalSupply;                \n        name = tokenName;                                   \n        symbol = tokenSymbol;                               \n    }\n",
            "vulnerability": "Integer Overflow",
            "reason": "The EAI_TokenERC20 function calculates the totalSupply by multiplying the initialSupply with 10 to the power of the decimals. If the initialSupply is too large, it can cause an integer overflow error."
        }
    ]
}