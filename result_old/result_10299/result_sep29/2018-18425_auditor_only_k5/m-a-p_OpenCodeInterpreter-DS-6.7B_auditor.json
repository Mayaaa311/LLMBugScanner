{
    "output_list": [
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The transfer function allows the contract to be called back before the balances are updated, which can lead to re-entrancy attacks."
        },
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The transferFrom function allows the contract to be called back before the balances are updated, which can lead to re-entrancy attacks."
        },
        {
            "function_name": "withdraw",
            "code": "function withdraw() onlyOwner public {\n        address myAddress = this;\n        uint256 etherBalance = myAddress.balance;\n        owner.transfer(etherBalance);\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The withdraw function allows the contract to be called back before the balances are updated, which can lead to re-entrancy attacks."
        },
        {
            "function_name": "getTokenBalance",
            "code": "function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        AltcoinToken t = AltcoinToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The getTokenBalance function allows the contract to be called back before the balances are updated, which can lead to re-entrancy attacks."
        },
        {
            "function_name": "withdrawAltcoinTokens",
            "code": "function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {\n        AltcoinToken token = AltcoinToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n",
            "vulnerability": "Re-entrancy",
            "reason": "The withdrawAltcoinTokens function allows the contract to be called back before the balances are updated, which can lead to re-entrancy attacks."
        }
    ]
}