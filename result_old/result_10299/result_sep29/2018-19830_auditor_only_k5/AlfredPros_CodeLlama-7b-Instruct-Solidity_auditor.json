

### Solution:
{
    "output_list": [
        {
            "function_name": "transferFrom",
            "code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{\n    var _allowance = allowed[_from][msg.sender];\n    require(!frozenAccount[_from]&&!frozenAccount[_to]);\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }",
            "vulnerability": "Integer Overflow",
            "reason": "The function transferFrom has a potential integer overflow vulnerability. The function uses the SafeMath library to prevent overflows, but the library does not prevent underflows. The function also uses the modifier onlyPayloadSize(3 * 32) which does not prevent the function from being called with a large value of msg.data.size()."
        },
        {
            "function_name": "transfer",
            "code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable{\n    if (frozenAccount[_to]) {\n        InvalidAccount(_to, \"The receiver account is frozen\");\n    } else {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    } \n  }",
            "vulnerability": "Integer Overflow",
            "reason": "The function transfer has a potential integer overflow vulnerability. The function uses the SafeMath library to prevent overflows, but the library does not prevent underflows. The function also uses the modifier onlyPayloadSize(2 * 32) which does not prevent the function from being called with a large value of msg.data.size()."
        },
        {
            "function_name": "approve",
            "code": "function approve(address _spender, uint _value) unFrozenAccount {\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }",
            "vulnerability": "Integer Overflow",
            "reason": "The function approve has a potential integer overflow vulnerability. The function uses the SafeMath library to prevent overflows, but the library does not prevent underflows. The function also uses the modifier unFrozenAccount which does not prevent the function from being called with a large value of msg.sender."
        },
        {
            "function_name": "transferOwnership",
            "code": "function transferOwnership(address newOwner) onlyOwner public {\n      if (newOwner != address(0)) {\n          address oldOwner=owner;\n          owner = newOwner;\n          OwnershipTransferred(oldOwner, owner);\n        }\n  }",
            "vulnerability": "Integer Overflow",
            "reason": "The function transferOwnership has a potential integer overflow vulnerability. The function uses the modifier onlyOwner which does not prevent the function from being called with a large value of msg.sender."
        },
        {
            "function_name": "switchLiquidity",
            "code": "function switchLiquidity (bool _transferable) onlyOwner returns (bool success) {\n      transferable=_transferable;\n      return true;\n  }",
            "vulnerability": "Integer Overflow",
            "reason": "The function switchLiquidity has a potential integer overflow vulnerability. The function uses the modifier onlyOwner which does not prevent the function from being called with a large value of msg.sender."
        }
    ]
}
