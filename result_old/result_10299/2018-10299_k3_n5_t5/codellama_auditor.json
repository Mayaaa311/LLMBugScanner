{
    "output_list": [
        {
            "function_name": "transfer",
            "code": "require(_to != address(0));\nrequire(_value > 0 && _value <= balances[msg.sender]);\nbalances[msg.sender] = balances[msg.sender].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nTransfer(msg.sender, _to, _value);\nreturn true;",
            "vulnerability": "Integer Overflow",
            "reason": "The transfer function does not check for integer overflow when calculating the new balance of the recipient and the sender."
        },
        {
            "function_name": "transferFrom",
            "code": "require(_value > 0 && allowed[msg.sender][_from] >= _value);\nallowed[msg.sender][_from] = allowed[msg.sender][_from].sub(_value);\nbalances[_from] = balances[_from].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nTransfer(_from, _to, _value);\nreturn true;",
            "vulnerability": "Integer Overflow",
            "reason": "The transferFrom function does not check for integer overflow when calculating the new balance of the sender and the recipient."
        },
        {
            "function_name": "batchTransfer",
            "code": "uint cnt = _receivers.length;\nuint256 amount = uint256(cnt) * _value;\nrequire(cnt > 0 && cnt <= 20);\nrequire(_value > 0 && balances[msg.sender] >= amount);\nbalances[msg.sender] = balances[msg.sender].sub(amount);\nfor (uint i = 0; i < cnt; i++) {\n    balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n    Transfer(msg.sender, _receivers[i], _value);\n}\nreturn true;",
            "vulnerability": "Integer Overflow",
            "reason": "The batchTransfer function does not check for integer overflow when calculating the total amount to be transferred and the new balance of the sender."
        }
    ]
}