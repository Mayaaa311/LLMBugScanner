You are a smart contract auditor, identify and explain vulnerabilities in the provided smart contract for each function. Make sure that they are exploitable in real world and beneficial to attackers. Provide each identified vulnerability with intermediate reasoning and its associated function. Make your reasoning comprehensive and detailed. Smart contract code:
{code}
vulnerabilities could be in these categories, and look for indicators described below:
1. Reentrancy Attack: Functions that call external contracts or send Ether before updating the contract's state. Look for patterns where external calls are made without proper safeguards, such as the Checks-Effects-Interactions pattern or using reentrancy guards (nonReentrant modifier).
2. Integer Overflow/Underflow: Arithmetic operations (addition, subtraction, multiplication) without the use of SafeMath or similar libraries. You can check for potential vulnerabilities by identifying arithmetic operations and ensuring they are wrapped in safety checks.
3. Access Control Vulnerability: Functions that allow critical operations (e.g., transferring ownership, minting tokens, modifying balances) without proper access control (e.g., onlyOwner or other role-based access modifiers).
4. Other Vulnerabilties: anything that raises your concern(e.g. logical error)
5. no vulerability:the code is safe.

Output {topk} most severe vulnerabilities(they should not be the same bug) in json format,
If no vulnerability is detected, you should only output in this json format {{"output_list": []}}.\n

Your output: 